# Import FPDF library to create a PDF document
from fpdf import FPDF

# Create instance of FPDF class
pdf = FPDF()

# Add a page
pdf.add_page()

# Set font
pdf.set_font("Arial", size = 12)

# Create the content based on today's chat
chat_content = [
    "User: What is the difference between IN and EXISTS in SQL?",
    "",
    "ChatGPT: The difference between `IN` and `EXISTS` in SQL lies in their usage and performance characteristics:",
    "",
    "`IN`:",
    "- Used to compare a value to a list of literal values or a subquery that returns a list of values.",
    "- Suitable for scenarios where you need to check if a value exists within a static list or a result set of a subquery.",
    "",
    "Example:",
    "   ```sql",
    "   SELECT empid",
    "   FROM employeedetails",
    "   WHERE empid IN (SELECT empid FROM employeesalary);",
    "   ```",
    "",
    "`EXISTS`:",
    "- Used to check the existence of rows returned by a subquery.",
    "- Suitable for scenarios where you need to verify the existence of related rows without returning any data from the subquery.",
    "",
    "Example:",
    "   ```sql",
    "   SELECT empid",
    "   FROM employeedetails e",
    "   WHERE EXISTS (SELECT 1 FROM employeesalary s WHERE s.empid = e.empid);",
    "   ```",
    "",
    "Performance Considerations:",
    "- `IN` is generally faster when dealing with a small list of values.",
    "- `EXISTS` is often more efficient with subqueries that return a large result set.",
    "- `EXISTS` is evaluated as soon as a match is found, making it more efficient in some cases.",
    "",
    "User: Write a query to find employees who earn more than their managers.",
    "",
    "ChatGPT: To find employees who earn more than their managers, you can join the EmployeeDetails table with the EmployeeSalary table twice: once to get the employee's salary and once to get the manager's salary. Then, compare the salaries.",
    "",
    "Here is the query:",
    "",
    "```sql",
    "SELECT e.EmpId, e.FullName",
    "FROM EmployeeDetails e",
    "JOIN EmployeeSalary es ON e.EmpId = es.EmpId",
    "JOIN EmployeeDetails m ON e.ManagerId = m.EmpId",
    "JOIN EmployeeSalary ms ON m.EmpId = ms.EmpId",
    "WHERE es.Salary > ms.Salary;",
    "```",
    "",
    "This query selects employees whose salary is greater than their manager's salary.",
    "",
    "User: logic for 3 mentions in string",
    "",
    "ChatGPT: To find if a string has exactly three mentions (e.g., '@' symbols for mentions), you can count the occurrences of the character in the string. In SQL, you can use the `LENGTH` and `REPLACE` functions to achieve this.",
    "",
    "Example:",
    "",
    "```sql",
    "SELECT tweet_text",
    "FROM tweets",
    "WHERE (LENGTH(tweet_text) - LENGTH(REPLACE(tweet_text, '@', ''))) = 3;",
    "```",
    "",
    "This query counts the number of '@' characters in the `tweet_text` column and filters the rows where the count is exactly 3.",
    "",
    "User: logic for It has more than 3 mentions.",
    "",
    "ChatGPT: Similarly, to find if a string has more than three mentions, you can use the same logic but change the condition to greater than 3.",
    "",
    "Example:",
    "",
    "```sql",
    "SELECT tweet_text",
    "FROM tweets",
    "WHERE (LENGTH(tweet_text) - LENGTH(REPLACE(tweet_text, '@', ''))) > 3;",
    "```",
    "",
    "User: Write a solution to find invalid tweets. A tweet is considered invalid if it meets any of the following criteria:",
    "- It exceeds 140 characters in length.",
    "- It has more than 3 mentions.",
    "- It includes more than 3 hashtags.",
    "Return the result table ordered by tweet_id in ascending order.",
    "",
    "ChatGPT: To find invalid tweets based on the given criteria, you can write a query that checks each condition using `LENGTH`, `REPLACE`, and `ORDER BY`.",
    "",
    "Here’s the solution:",
    "",
    "```sql",
    "SELECT tweet_id, tweet_text",
    "FROM tweets",
    "WHERE LENGTH(tweet_text) > 140",
    "   OR (LENGTH(tweet_text) - LENGTH(REPLACE(tweet_text, '@', ''))) > 3",
    "   OR (LENGTH(tweet_text) - LENGTH(REPLACE(tweet_text, '#', ''))) > 3",
    "ORDER BY tweet_id ASC;",
    "```",
    "",
    "This query filters tweets that exceed 140 characters, have more than 3 mentions, or have more than 3 hashtags, and orders the results by `tweet_id` in ascending order.",
    "",
    "User: Can you explain it more?",
    "",
    "ChatGPT: Sure! Let's break down the query:",
    "",
    "1. `LENGTH(tweet_text) > 140`: This condition checks if the tweet exceeds 140 characters.",
    "",
    "2. `(LENGTH(tweet_text) - LENGTH(REPLACE(tweet_text, '@', ''))) > 3`:",
    "   - `REPLACE(tweet_text, '@', '')` removes all '@' characters from the tweet.",
    "   - `LENGTH(tweet_text) - LENGTH(REPLACE(tweet_text, '@', ''))` calculates the number of '@' characters by comparing the length of the original tweet with the length after removing all '@' characters.",
    "   - `> 3` checks if there are more than 3 mentions.",
    "",
    "3. `(LENGTH(tweet_text) - LENGTH(REPLACE(tweet_text, '#', ''))) > 3`:",
    "   - This condition works the same way as the mentions condition but checks for '#' characters to count hashtags.",
    "",
    "4. `ORDER BY tweet_id ASC`: Orders the result by `tweet_id` in ascending order.",
    "",
    "User: (LENGTH(tweet_text) - LENGTH(REPLACE(tweet_text, '@', '')))",
    "",
    "ChatGPT: This expression calculates the number of '@' characters (mentions) in the `tweet_text`. Here's how it works:",
    "",
    "1. `LENGTH(tweet_text)`: Gets the length of the original tweet text.",
    "2. `REPLACE(tweet_text, '@', '')`: Removes all '@' characters from the tweet text.",
    "3. `LENGTH(REPLACE(tweet_text, '@', ''))`: Gets the length of the tweet text after removing the '@' characters.",
    "4. `LENGTH(tweet_text) - LENGTH(REPLACE(tweet_text, '@', ''))`: Subtracts the length of the modified tweet from the original length, giving the count of '@' characters.",
    "",
    "User: Table: Departments",
    "",
    "+---------------+---------+",
    "| Column Name   | Type    |",
    "+---------------+---------+",
    "| id            | int     |",
    "| name          | varchar |",
    "+---------------+---------+",
    "In SQL, id is the primary key of this table.",
    "The table has information about the id of each department of a university.",
    "",
    "Table: Students",
    "",
    "+---------------+---------+",
    "| Column Name   | Type    |",
    "+---------------+---------+",
    "| id            | int     |",
    "| name          | varchar |",
    "| department_id | int     |",
    "+---------------+---------+",
    "In SQL, id is the primary key of this table.",
    "The table has information about the id of each student at a university and the id of the department he/she studies at.",
    "",
    "Find the id and the name of all students who are enrolled in departments that no longer exist.",
    "Return the result table in any order.",
    "",
    "ChatGPT: To find students who are enrolled in departments that no longer exist, you can use a LEFT JOIN to identify students whose department_id does not have a corresponding id in the Departments table.",
    "",
    "Here is the query:",
    "",
    "```sql",
    "SELECT s.id, s.name",
    "FROM Students s",
    "LEFT JOIN Departments d ON s.department_id = d.id",
    "WHERE d.id IS NULL;",
    "```",
    "",
    "Explanation:",
    "- `LEFT JOIN Departments d ON s.department_id = d.id`: This joins the Students table with the Departments table, including all students and matching departments where available.",
    "- `WHERE d.id IS NULL`: This filters the results to include only those students whose `department_id` does not match any `id` in the Departments table.",
    "",
    "User: Can you explain more?",
    "SELECT s.id, s.name",
    "FROM Students s",
    "LEFT JOIN Departments d ON s.department_id = d.id",
    "WHERE d.id IS NULL;",
    "",
    "ChatGPT: Certainly! Let’s break it down step by step.",
    "",
    "1. **LEFT JOIN**: The LEFT JOIN returns all records from the left table (Students), and the matched records from the right table (Departments). The result is NULL from the right side if there is no match.",
    "",
    "2. **ON s
